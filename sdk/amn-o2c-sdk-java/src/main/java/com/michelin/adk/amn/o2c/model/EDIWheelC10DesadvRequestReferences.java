/*
 * Michelin North America Order-to-Cash APIs
 * These APIs will help you to do business transactions with Michelin.  <br><br><b>Authentication details:</b><br> <br><u>Option A:</u> OAuth2 Client Credentials (recommended) <br><u>Option B:</u> API Key + Basic Authentication (not recommended) <br><br>To request your access, please contact your representative. <br><br>Our services are based on the EDIWHEEL standards. <br>You can find more information on the <a href=\"https://www.ediwheel.com/\" target=\"_blank\">EDIWHEEL website</a>. 
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.michelin.adk.amn.o2c.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.michelin.adk.amn.JSON;

/**
 * EDIWheelC10DesadvRequestReferences
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class EDIWheelC10DesadvRequestReferences {
  /**
   * Reference Type Codes available for use are as follows: VN &#x3D; Michelin Sales Order Number, ON &#x3D; Customer Purchase Order Number. If used in request, responses will be limited to item(s) with the designated referenceTypeCode. Only one referenceTypeCode can be used per request.
   */
  @JsonAdapter(ReferenceTypeCodeEnum.Adapter.class)
  public enum ReferenceTypeCodeEnum {
    VN("VN"),
    
    ON("ON");

    private String value;

    ReferenceTypeCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReferenceTypeCodeEnum fromValue(String value) {
      for (ReferenceTypeCodeEnum b : ReferenceTypeCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReferenceTypeCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReferenceTypeCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReferenceTypeCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReferenceTypeCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReferenceTypeCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REFERENCE_TYPE_CODE = "referenceTypeCode";
  @SerializedName(SERIALIZED_NAME_REFERENCE_TYPE_CODE)
  @javax.annotation.Nullable
  private ReferenceTypeCodeEnum referenceTypeCode;

  public static final String SERIALIZED_NAME_DOCUMENT_I_D = "documentID";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_I_D)
  @javax.annotation.Nullable
  private String documentID;

  public EDIWheelC10DesadvRequestReferences() {
  }

  public EDIWheelC10DesadvRequestReferences referenceTypeCode(@javax.annotation.Nullable ReferenceTypeCodeEnum referenceTypeCode) {
    this.referenceTypeCode = referenceTypeCode;
    return this;
  }

  /**
   * Reference Type Codes available for use are as follows: VN &#x3D; Michelin Sales Order Number, ON &#x3D; Customer Purchase Order Number. If used in request, responses will be limited to item(s) with the designated referenceTypeCode. Only one referenceTypeCode can be used per request.
   * @return referenceTypeCode
   */
  @javax.annotation.Nullable
  public ReferenceTypeCodeEnum getReferenceTypeCode() {
    return referenceTypeCode;
  }

  public void setReferenceTypeCode(@javax.annotation.Nullable ReferenceTypeCodeEnum referenceTypeCode) {
    this.referenceTypeCode = referenceTypeCode;
  }


  public EDIWheelC10DesadvRequestReferences documentID(@javax.annotation.Nullable String documentID) {
    this.documentID = documentID;
    return this;
  }

  /**
   * Corresponding value for above referenceTypeCode (if used). Only one referenceTypeCode documentID can be used per request. Date range OR Reference value required for searches.
   * @return documentID
   */
  @javax.annotation.Nullable
  public String getDocumentID() {
    return documentID;
  }

  public void setDocumentID(@javax.annotation.Nullable String documentID) {
    this.documentID = documentID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EDIWheelC10DesadvRequestReferences edIWheelC10DesadvRequestReferences = (EDIWheelC10DesadvRequestReferences) o;
    return Objects.equals(this.referenceTypeCode, edIWheelC10DesadvRequestReferences.referenceTypeCode) &&
        Objects.equals(this.documentID, edIWheelC10DesadvRequestReferences.documentID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(referenceTypeCode, documentID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EDIWheelC10DesadvRequestReferences {\n");
    sb.append("    referenceTypeCode: ").append(toIndentedString(referenceTypeCode)).append("\n");
    sb.append("    documentID: ").append(toIndentedString(documentID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("referenceTypeCode");
    openapiFields.add("documentID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EDIWheelC10DesadvRequestReferences
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EDIWheelC10DesadvRequestReferences.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EDIWheelC10DesadvRequestReferences is not found in the empty JSON string", EDIWheelC10DesadvRequestReferences.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EDIWheelC10DesadvRequestReferences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EDIWheelC10DesadvRequestReferences` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("referenceTypeCode") != null && !jsonObj.get("referenceTypeCode").isJsonNull()) && !jsonObj.get("referenceTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceTypeCode").toString()));
      }
      // validate the optional field `referenceTypeCode`
      if (jsonObj.get("referenceTypeCode") != null && !jsonObj.get("referenceTypeCode").isJsonNull()) {
        ReferenceTypeCodeEnum.validateJsonElement(jsonObj.get("referenceTypeCode"));
      }
      if ((jsonObj.get("documentID") != null && !jsonObj.get("documentID").isJsonNull()) && !jsonObj.get("documentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EDIWheelC10DesadvRequestReferences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EDIWheelC10DesadvRequestReferences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EDIWheelC10DesadvRequestReferences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EDIWheelC10DesadvRequestReferences.class));

       return (TypeAdapter<T>) new TypeAdapter<EDIWheelC10DesadvRequestReferences>() {
           @Override
           public void write(JsonWriter out, EDIWheelC10DesadvRequestReferences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EDIWheelC10DesadvRequestReferences read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EDIWheelC10DesadvRequestReferences given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EDIWheelC10DesadvRequestReferences
   * @throws IOException if the JSON string is invalid with respect to EDIWheelC10DesadvRequestReferences
   */
  public static EDIWheelC10DesadvRequestReferences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EDIWheelC10DesadvRequestReferences.class);
  }

  /**
   * Convert an instance of EDIWheelC10DesadvRequestReferences to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

