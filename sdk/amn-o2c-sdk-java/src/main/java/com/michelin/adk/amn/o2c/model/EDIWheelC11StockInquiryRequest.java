/*
 * Michelin North America Order-to-Cash APIs for dealers
 * These APIs will help you to do business transactions with Michelin.  <br><br><b>Authentication details:</b><br> <br><u>Option A:</u> OAuth2 Client Credentials (recommended) <br><u>Option B:</u> API Key + Basic Authentication (not recommended) <br><br>To request your access, please contact your representative. <br><br>Our services are based on the EDIWHEEL standards. <br>You can find more information on the <a href=\"https://www.ediwheel.com/\" target=\"_blank\">EDIWHEEL website</a>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dcti-bs-ec-cit-support@michelin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.michelin.adk.amn.o2c.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.michelin.adk.amn.o2c.model.EDIWheelC11StockInquiryRequestBuyerParty;
import com.michelin.adk.amn.o2c.model.EDIWheelC11StockInquiryRequestConsignee;
import com.michelin.adk.amn.o2c.model.EDIWheelC11StockInquiryRequestCustomerReference;
import com.michelin.adk.amn.o2c.model.EDIWheelC11StockInquiryRequestOrderLine;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.michelin.adk.amn.JSON;

/**
 * EDIWheelC11StockInquiryRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-17T01:25:07.723106500-05:00[America/Toronto]", comments = "Generator version: 7.10.0")
public class EDIWheelC11StockInquiryRequest {
  public static final String SERIALIZED_NAME_VARIANT = "variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  @javax.annotation.Nonnull
  private String variant;

  public static final String SERIALIZED_NAME_ORDER_LINE = "orderLine";
  @SerializedName(SERIALIZED_NAME_ORDER_LINE)
  @javax.annotation.Nonnull
  private List<EDIWheelC11StockInquiryRequestOrderLine> orderLine = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOCUMENT_I_D = "documentID";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_I_D)
  @javax.annotation.Nonnull
  private String documentID;

  public static final String SERIALIZED_NAME_CUSTOMER_REFERENCE = "customerReference";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_REFERENCE)
  @javax.annotation.Nullable
  private EDIWheelC11StockInquiryRequestCustomerReference customerReference;

  public static final String SERIALIZED_NAME_CONSIGNEE = "consignee";
  @SerializedName(SERIALIZED_NAME_CONSIGNEE)
  @javax.annotation.Nonnull
  private EDIWheelC11StockInquiryRequestConsignee consignee;

  public static final String SERIALIZED_NAME_BUYER_PARTY = "buyerParty";
  @SerializedName(SERIALIZED_NAME_BUYER_PARTY)
  @javax.annotation.Nonnull
  private EDIWheelC11StockInquiryRequestBuyerParty buyerParty;

  public EDIWheelC11StockInquiryRequest() {
  }

  public EDIWheelC11StockInquiryRequest variant(@javax.annotation.Nonnull String variant) {
    this.variant = variant;
    return this;
  }

  /**
   * Get variant
   * @return variant
   */
  @javax.annotation.Nonnull
  public String getVariant() {
    return variant;
  }

  public void setVariant(@javax.annotation.Nonnull String variant) {
    this.variant = variant;
  }


  public EDIWheelC11StockInquiryRequest orderLine(@javax.annotation.Nonnull List<EDIWheelC11StockInquiryRequestOrderLine> orderLine) {
    this.orderLine = orderLine;
    return this;
  }

  public EDIWheelC11StockInquiryRequest addOrderLineItem(EDIWheelC11StockInquiryRequestOrderLine orderLineItem) {
    if (this.orderLine == null) {
      this.orderLine = new ArrayList<>();
    }
    this.orderLine.add(orderLineItem);
    return this;
  }

  /**
   * Get orderLine
   * @return orderLine
   */
  @javax.annotation.Nonnull
  public List<EDIWheelC11StockInquiryRequestOrderLine> getOrderLine() {
    return orderLine;
  }

  public void setOrderLine(@javax.annotation.Nonnull List<EDIWheelC11StockInquiryRequestOrderLine> orderLine) {
    this.orderLine = orderLine;
  }


  public EDIWheelC11StockInquiryRequest documentID(@javax.annotation.Nonnull String documentID) {
    this.documentID = documentID;
    return this;
  }

  /**
   * Get documentID
   * @return documentID
   */
  @javax.annotation.Nonnull
  public String getDocumentID() {
    return documentID;
  }

  public void setDocumentID(@javax.annotation.Nonnull String documentID) {
    this.documentID = documentID;
  }


  public EDIWheelC11StockInquiryRequest customerReference(@javax.annotation.Nullable EDIWheelC11StockInquiryRequestCustomerReference customerReference) {
    this.customerReference = customerReference;
    return this;
  }

  /**
   * Get customerReference
   * @return customerReference
   */
  @javax.annotation.Nullable
  public EDIWheelC11StockInquiryRequestCustomerReference getCustomerReference() {
    return customerReference;
  }

  public void setCustomerReference(@javax.annotation.Nullable EDIWheelC11StockInquiryRequestCustomerReference customerReference) {
    this.customerReference = customerReference;
  }


  public EDIWheelC11StockInquiryRequest consignee(@javax.annotation.Nonnull EDIWheelC11StockInquiryRequestConsignee consignee) {
    this.consignee = consignee;
    return this;
  }

  /**
   * Get consignee
   * @return consignee
   */
  @javax.annotation.Nonnull
  public EDIWheelC11StockInquiryRequestConsignee getConsignee() {
    return consignee;
  }

  public void setConsignee(@javax.annotation.Nonnull EDIWheelC11StockInquiryRequestConsignee consignee) {
    this.consignee = consignee;
  }


  public EDIWheelC11StockInquiryRequest buyerParty(@javax.annotation.Nonnull EDIWheelC11StockInquiryRequestBuyerParty buyerParty) {
    this.buyerParty = buyerParty;
    return this;
  }

  /**
   * Get buyerParty
   * @return buyerParty
   */
  @javax.annotation.Nonnull
  public EDIWheelC11StockInquiryRequestBuyerParty getBuyerParty() {
    return buyerParty;
  }

  public void setBuyerParty(@javax.annotation.Nonnull EDIWheelC11StockInquiryRequestBuyerParty buyerParty) {
    this.buyerParty = buyerParty;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EDIWheelC11StockInquiryRequest edIWheelC11StockInquiryRequest = (EDIWheelC11StockInquiryRequest) o;
    return Objects.equals(this.variant, edIWheelC11StockInquiryRequest.variant) &&
        Objects.equals(this.orderLine, edIWheelC11StockInquiryRequest.orderLine) &&
        Objects.equals(this.documentID, edIWheelC11StockInquiryRequest.documentID) &&
        Objects.equals(this.customerReference, edIWheelC11StockInquiryRequest.customerReference) &&
        Objects.equals(this.consignee, edIWheelC11StockInquiryRequest.consignee) &&
        Objects.equals(this.buyerParty, edIWheelC11StockInquiryRequest.buyerParty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(variant, orderLine, documentID, customerReference, consignee, buyerParty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EDIWheelC11StockInquiryRequest {\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("    orderLine: ").append(toIndentedString(orderLine)).append("\n");
    sb.append("    documentID: ").append(toIndentedString(documentID)).append("\n");
    sb.append("    customerReference: ").append(toIndentedString(customerReference)).append("\n");
    sb.append("    consignee: ").append(toIndentedString(consignee)).append("\n");
    sb.append("    buyerParty: ").append(toIndentedString(buyerParty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("variant");
    openapiFields.add("orderLine");
    openapiFields.add("documentID");
    openapiFields.add("customerReference");
    openapiFields.add("consignee");
    openapiFields.add("buyerParty");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("variant");
    openapiRequiredFields.add("orderLine");
    openapiRequiredFields.add("documentID");
    openapiRequiredFields.add("consignee");
    openapiRequiredFields.add("buyerParty");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EDIWheelC11StockInquiryRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EDIWheelC11StockInquiryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EDIWheelC11StockInquiryRequest is not found in the empty JSON string", EDIWheelC11StockInquiryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EDIWheelC11StockInquiryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EDIWheelC11StockInquiryRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EDIWheelC11StockInquiryRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("variant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("orderLine").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderLine` to be an array in the JSON string but got `%s`", jsonObj.get("orderLine").toString()));
      }

      JsonArray jsonArrayorderLine = jsonObj.getAsJsonArray("orderLine");
      // validate the required field `orderLine` (array)
      for (int i = 0; i < jsonArrayorderLine.size(); i++) {
        EDIWheelC11StockInquiryRequestOrderLine.validateJsonElement(jsonArrayorderLine.get(i));
      };
      if (!jsonObj.get("documentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentID").toString()));
      }
      // validate the optional field `customerReference`
      if (jsonObj.get("customerReference") != null && !jsonObj.get("customerReference").isJsonNull()) {
        EDIWheelC11StockInquiryRequestCustomerReference.validateJsonElement(jsonObj.get("customerReference"));
      }
      // validate the required field `consignee`
      EDIWheelC11StockInquiryRequestConsignee.validateJsonElement(jsonObj.get("consignee"));
      // validate the required field `buyerParty`
      EDIWheelC11StockInquiryRequestBuyerParty.validateJsonElement(jsonObj.get("buyerParty"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EDIWheelC11StockInquiryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EDIWheelC11StockInquiryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EDIWheelC11StockInquiryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EDIWheelC11StockInquiryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EDIWheelC11StockInquiryRequest>() {
           @Override
           public void write(JsonWriter out, EDIWheelC11StockInquiryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EDIWheelC11StockInquiryRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EDIWheelC11StockInquiryRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EDIWheelC11StockInquiryRequest
   * @throws IOException if the JSON string is invalid with respect to EDIWheelC11StockInquiryRequest
   */
  public static EDIWheelC11StockInquiryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EDIWheelC11StockInquiryRequest.class);
  }

  /**
   * Convert an instance of EDIWheelC11StockInquiryRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

