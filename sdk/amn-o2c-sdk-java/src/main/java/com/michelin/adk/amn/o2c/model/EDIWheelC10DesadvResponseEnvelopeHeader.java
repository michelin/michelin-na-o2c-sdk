/*
 * Michelin North America Order-to-Cash APIs for dealers
 * These APIs will help you to do business transactions with Michelin.  <br><br><b>Authentication details:</b><br> <br><u>Option A:</u> OAuth2 Client Credentials (recommended) <br><u>Option B:</u> API Key + Basic Authentication (not recommended) <br><br>To request your access, please contact your representative. <br><br>Our services are based on the EDIWHEEL standards. <br>You can find more information on the <a href=\"https://www.ediwheel.com/\" target=\"_blank\">EDIWHEEL website</a>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dcti-bs-ec-cit-support@michelin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.michelin.adk.amn.o2c.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.michelin.adk.amn.JSON;

/**
 * EDIWheelC10DesadvResponseEnvelopeHeader
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-13T06:44:55.014855667Z[GMT]", comments = "Generator version: 7.9.0")
public class EDIWheelC10DesadvResponseEnvelopeHeader {
  public static final String SERIALIZED_NAME_DOCUMENT_I_D = "DocumentID";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_I_D)
  private String documentID;

  public static final String SERIALIZED_NAME_VARIANT = "Variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  private String variant;

  public static final String SERIALIZED_NAME_RECEIVER_I_D = "ReceiverID";
  @SerializedName(SERIALIZED_NAME_RECEIVER_I_D)
  private String receiverID;

  public static final String SERIALIZED_NAME_SENDER_I_D = "SenderID";
  @SerializedName(SERIALIZED_NAME_SENDER_I_D)
  private String senderID;

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "MessageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private String messageType;

  public static final String SERIALIZED_NAME_INTERCHANGE_I_D = "InterchangeID";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE_I_D)
  private String interchangeID;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_NUMBER_OF_MESSAGES = "NumberOfMessages";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_MESSAGES)
  private String numberOfMessages;

  public EDIWheelC10DesadvResponseEnvelopeHeader() {
  }

  public EDIWheelC10DesadvResponseEnvelopeHeader documentID(String documentID) {
    this.documentID = documentID;
    return this;
  }

  /**
   * Get documentID
   * @return documentID
   */
  @javax.annotation.Nonnull
  public String getDocumentID() {
    return documentID;
  }

  public void setDocumentID(String documentID) {
    this.documentID = documentID;
  }


  public EDIWheelC10DesadvResponseEnvelopeHeader variant(String variant) {
    this.variant = variant;
    return this;
  }

  /**
   * Get variant
   * @return variant
   */
  @javax.annotation.Nonnull
  public String getVariant() {
    return variant;
  }

  public void setVariant(String variant) {
    this.variant = variant;
  }


  public EDIWheelC10DesadvResponseEnvelopeHeader receiverID(String receiverID) {
    this.receiverID = receiverID;
    return this;
  }

  /**
   * Get receiverID
   * @return receiverID
   */
  @javax.annotation.Nonnull
  public String getReceiverID() {
    return receiverID;
  }

  public void setReceiverID(String receiverID) {
    this.receiverID = receiverID;
  }


  public EDIWheelC10DesadvResponseEnvelopeHeader senderID(String senderID) {
    this.senderID = senderID;
    return this;
  }

  /**
   * Get senderID
   * @return senderID
   */
  @javax.annotation.Nonnull
  public String getSenderID() {
    return senderID;
  }

  public void setSenderID(String senderID) {
    this.senderID = senderID;
  }


  public EDIWheelC10DesadvResponseEnvelopeHeader messageType(String messageType) {
    this.messageType = messageType;
    return this;
  }

  /**
   * Get messageType
   * @return messageType
   */
  @javax.annotation.Nonnull
  public String getMessageType() {
    return messageType;
  }

  public void setMessageType(String messageType) {
    this.messageType = messageType;
  }


  public EDIWheelC10DesadvResponseEnvelopeHeader interchangeID(String interchangeID) {
    this.interchangeID = interchangeID;
    return this;
  }

  /**
   * Get interchangeID
   * @return interchangeID
   */
  @javax.annotation.Nullable
  public String getInterchangeID() {
    return interchangeID;
  }

  public void setInterchangeID(String interchangeID) {
    this.interchangeID = interchangeID;
  }


  public EDIWheelC10DesadvResponseEnvelopeHeader timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public EDIWheelC10DesadvResponseEnvelopeHeader numberOfMessages(String numberOfMessages) {
    this.numberOfMessages = numberOfMessages;
    return this;
  }

  /**
   * Get numberOfMessages
   * @return numberOfMessages
   */
  @javax.annotation.Nonnull
  public String getNumberOfMessages() {
    return numberOfMessages;
  }

  public void setNumberOfMessages(String numberOfMessages) {
    this.numberOfMessages = numberOfMessages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EDIWheelC10DesadvResponseEnvelopeHeader edIWheelC10DesadvResponseEnvelopeHeader = (EDIWheelC10DesadvResponseEnvelopeHeader) o;
    return Objects.equals(this.documentID, edIWheelC10DesadvResponseEnvelopeHeader.documentID) &&
        Objects.equals(this.variant, edIWheelC10DesadvResponseEnvelopeHeader.variant) &&
        Objects.equals(this.receiverID, edIWheelC10DesadvResponseEnvelopeHeader.receiverID) &&
        Objects.equals(this.senderID, edIWheelC10DesadvResponseEnvelopeHeader.senderID) &&
        Objects.equals(this.messageType, edIWheelC10DesadvResponseEnvelopeHeader.messageType) &&
        Objects.equals(this.interchangeID, edIWheelC10DesadvResponseEnvelopeHeader.interchangeID) &&
        Objects.equals(this.timestamp, edIWheelC10DesadvResponseEnvelopeHeader.timestamp) &&
        Objects.equals(this.numberOfMessages, edIWheelC10DesadvResponseEnvelopeHeader.numberOfMessages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentID, variant, receiverID, senderID, messageType, interchangeID, timestamp, numberOfMessages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EDIWheelC10DesadvResponseEnvelopeHeader {\n");
    sb.append("    documentID: ").append(toIndentedString(documentID)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("    receiverID: ").append(toIndentedString(receiverID)).append("\n");
    sb.append("    senderID: ").append(toIndentedString(senderID)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    interchangeID: ").append(toIndentedString(interchangeID)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    numberOfMessages: ").append(toIndentedString(numberOfMessages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DocumentID");
    openapiFields.add("Variant");
    openapiFields.add("ReceiverID");
    openapiFields.add("SenderID");
    openapiFields.add("MessageType");
    openapiFields.add("InterchangeID");
    openapiFields.add("Timestamp");
    openapiFields.add("NumberOfMessages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DocumentID");
    openapiRequiredFields.add("Variant");
    openapiRequiredFields.add("ReceiverID");
    openapiRequiredFields.add("SenderID");
    openapiRequiredFields.add("MessageType");
    openapiRequiredFields.add("Timestamp");
    openapiRequiredFields.add("NumberOfMessages");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EDIWheelC10DesadvResponseEnvelopeHeader
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EDIWheelC10DesadvResponseEnvelopeHeader.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EDIWheelC10DesadvResponseEnvelopeHeader is not found in the empty JSON string", EDIWheelC10DesadvResponseEnvelopeHeader.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EDIWheelC10DesadvResponseEnvelopeHeader.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EDIWheelC10DesadvResponseEnvelopeHeader` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EDIWheelC10DesadvResponseEnvelopeHeader.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DocumentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocumentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DocumentID").toString()));
      }
      if (!jsonObj.get("Variant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Variant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Variant").toString()));
      }
      if (!jsonObj.get("ReceiverID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReceiverID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReceiverID").toString()));
      }
      if (!jsonObj.get("SenderID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SenderID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SenderID").toString()));
      }
      if (!jsonObj.get("MessageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MessageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MessageType").toString()));
      }
      if ((jsonObj.get("InterchangeID") != null && !jsonObj.get("InterchangeID").isJsonNull()) && !jsonObj.get("InterchangeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InterchangeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InterchangeID").toString()));
      }
      if (!jsonObj.get("Timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Timestamp").toString()));
      }
      if (!jsonObj.get("NumberOfMessages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NumberOfMessages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NumberOfMessages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EDIWheelC10DesadvResponseEnvelopeHeader.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EDIWheelC10DesadvResponseEnvelopeHeader' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EDIWheelC10DesadvResponseEnvelopeHeader> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EDIWheelC10DesadvResponseEnvelopeHeader.class));

       return (TypeAdapter<T>) new TypeAdapter<EDIWheelC10DesadvResponseEnvelopeHeader>() {
           @Override
           public void write(JsonWriter out, EDIWheelC10DesadvResponseEnvelopeHeader value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EDIWheelC10DesadvResponseEnvelopeHeader read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EDIWheelC10DesadvResponseEnvelopeHeader given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EDIWheelC10DesadvResponseEnvelopeHeader
   * @throws IOException if the JSON string is invalid with respect to EDIWheelC10DesadvResponseEnvelopeHeader
   */
  public static EDIWheelC10DesadvResponseEnvelopeHeader fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EDIWheelC10DesadvResponseEnvelopeHeader.class);
  }

  /**
   * Convert an instance of EDIWheelC10DesadvResponseEnvelopeHeader to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

