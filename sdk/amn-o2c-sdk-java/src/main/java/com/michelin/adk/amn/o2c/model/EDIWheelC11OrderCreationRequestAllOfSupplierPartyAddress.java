/*
 * Michelin North America Order-to-Cash APIs
 * These APIs will help you to do business transactions with Michelin.  <br><br><b>Authentication details:</b><br> <br><u>Option A:</u> OAuth2 Client Credentials (recommended) <br><u>Option B:</u> API Key + Basic Authentication (not recommended) <br><br>To request your access, please contact your representative. <br><br>Our services are based on the EDIWHEEL standards. <br>You can find more information on the <a href=\"https://www.ediwheel.com/\" target=\"_blank\">EDIWHEEL website</a>. 
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.michelin.adk.amn.o2c.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.michelin.adk.amn.JSON;

/**
 * EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress {
  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  @javax.annotation.Nullable
  private List<String> street = new ArrayList<>();

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  @javax.annotation.Nullable
  private String city;

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  @javax.annotation.Nullable
  private String district;

  public static final String SERIALIZED_NAME_POST_CODE = "postCode";
  @SerializedName(SERIALIZED_NAME_POST_CODE)
  @javax.annotation.Nullable
  private String postCode;

  public static final String SERIALIZED_NAME_POST_BOX_CODE = "postBoxCode";
  @SerializedName(SERIALIZED_NAME_POST_BOX_CODE)
  @javax.annotation.Nullable
  private String postBoxCode;

  public static final String SERIALIZED_NAME_SUB_COUNTRY = "subCountry";
  @SerializedName(SERIALIZED_NAME_SUB_COUNTRY)
  @javax.annotation.Nullable
  private String subCountry;

  /**
   * Gets or Sets countryCode
   */
  @JsonAdapter(CountryCodeEnum.Adapter.class)
  public enum CountryCodeEnum {
    US("US"),
    
    CA("CA");

    private String value;

    CountryCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CountryCodeEnum fromValue(String value) {
      for (CountryCodeEnum b : CountryCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CountryCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CountryCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CountryCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CountryCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CountryCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  @javax.annotation.Nonnull
  private CountryCodeEnum countryCode;

  public EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress() {
  }

  public EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress street(@javax.annotation.Nullable List<String> street) {
    this.street = street;
    return this;
  }

  public EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress addStreetItem(String streetItem) {
    if (this.street == null) {
      this.street = new ArrayList<>();
    }
    this.street.add(streetItem);
    return this;
  }

  /**
   * Get street
   * @return street
   */
  @javax.annotation.Nullable
  public List<String> getStreet() {
    return street;
  }

  public void setStreet(@javax.annotation.Nullable List<String> street) {
    this.street = street;
  }


  public EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress city(@javax.annotation.Nullable String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(@javax.annotation.Nullable String city) {
    this.city = city;
  }


  public EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress district(@javax.annotation.Nullable String district) {
    this.district = district;
    return this;
  }

  /**
   * Get district
   * @return district
   */
  @javax.annotation.Nullable
  public String getDistrict() {
    return district;
  }

  public void setDistrict(@javax.annotation.Nullable String district) {
    this.district = district;
  }


  public EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress postCode(@javax.annotation.Nullable String postCode) {
    this.postCode = postCode;
    return this;
  }

  /**
   * Get postCode
   * @return postCode
   */
  @javax.annotation.Nullable
  public String getPostCode() {
    return postCode;
  }

  public void setPostCode(@javax.annotation.Nullable String postCode) {
    this.postCode = postCode;
  }


  public EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress postBoxCode(@javax.annotation.Nullable String postBoxCode) {
    this.postBoxCode = postBoxCode;
    return this;
  }

  /**
   * Get postBoxCode
   * @return postBoxCode
   */
  @javax.annotation.Nullable
  public String getPostBoxCode() {
    return postBoxCode;
  }

  public void setPostBoxCode(@javax.annotation.Nullable String postBoxCode) {
    this.postBoxCode = postBoxCode;
  }


  public EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress subCountry(@javax.annotation.Nullable String subCountry) {
    this.subCountry = subCountry;
    return this;
  }

  /**
   * Get subCountry
   * @return subCountry
   */
  @javax.annotation.Nullable
  public String getSubCountry() {
    return subCountry;
  }

  public void setSubCountry(@javax.annotation.Nullable String subCountry) {
    this.subCountry = subCountry;
  }


  public EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress countryCode(@javax.annotation.Nonnull CountryCodeEnum countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Get countryCode
   * @return countryCode
   */
  @javax.annotation.Nonnull
  public CountryCodeEnum getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(@javax.annotation.Nonnull CountryCodeEnum countryCode) {
    this.countryCode = countryCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress edIWheelC11OrderCreationRequestAllOfSupplierPartyAddress = (EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress) o;
    return Objects.equals(this.street, edIWheelC11OrderCreationRequestAllOfSupplierPartyAddress.street) &&
        Objects.equals(this.city, edIWheelC11OrderCreationRequestAllOfSupplierPartyAddress.city) &&
        Objects.equals(this.district, edIWheelC11OrderCreationRequestAllOfSupplierPartyAddress.district) &&
        Objects.equals(this.postCode, edIWheelC11OrderCreationRequestAllOfSupplierPartyAddress.postCode) &&
        Objects.equals(this.postBoxCode, edIWheelC11OrderCreationRequestAllOfSupplierPartyAddress.postBoxCode) &&
        Objects.equals(this.subCountry, edIWheelC11OrderCreationRequestAllOfSupplierPartyAddress.subCountry) &&
        Objects.equals(this.countryCode, edIWheelC11OrderCreationRequestAllOfSupplierPartyAddress.countryCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(street, city, district, postCode, postBoxCode, subCountry, countryCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress {\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    postCode: ").append(toIndentedString(postCode)).append("\n");
    sb.append("    postBoxCode: ").append(toIndentedString(postBoxCode)).append("\n");
    sb.append("    subCountry: ").append(toIndentedString(subCountry)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("street");
    openapiFields.add("city");
    openapiFields.add("district");
    openapiFields.add("postCode");
    openapiFields.add("postBoxCode");
    openapiFields.add("subCountry");
    openapiFields.add("countryCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("countryCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress is not found in the empty JSON string", EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull() && !jsonObj.get("street").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be an array in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) && !jsonObj.get("district").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `district` to be a primitive type in the JSON string but got `%s`", jsonObj.get("district").toString()));
      }
      if ((jsonObj.get("postCode") != null && !jsonObj.get("postCode").isJsonNull()) && !jsonObj.get("postCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postCode").toString()));
      }
      if ((jsonObj.get("postBoxCode") != null && !jsonObj.get("postBoxCode").isJsonNull()) && !jsonObj.get("postBoxCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postBoxCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postBoxCode").toString()));
      }
      if ((jsonObj.get("subCountry") != null && !jsonObj.get("subCountry").isJsonNull()) && !jsonObj.get("subCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subCountry").toString()));
      }
      if (!jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      // validate the required field `countryCode`
      CountryCodeEnum.validateJsonElement(jsonObj.get("countryCode"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress>() {
           @Override
           public void write(JsonWriter out, EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress
   * @throws IOException if the JSON string is invalid with respect to EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress
   */
  public static EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress.class);
  }

  /**
   * Convert an instance of EDIWheelC11OrderCreationRequestAllOfSupplierPartyAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

