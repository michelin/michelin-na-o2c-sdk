/*
 * Michelin North America Order-to-Cash APIs
 * These APIs will help you to do business transactions with Michelin.  <br><br><b>Authentication details:</b><br> <br><u>Option A:</u> OAuth2 Client Credentials (recommended) <br><u>Option B:</u> API Key + Basic Authentication (not recommended) <br><br>To request your access, please contact your representative. <br><br>Our services are based on the EDIWHEEL standards. <br>You can find more information on the <a href=\"https://www.ediwheel.com/\" target=\"_blank\">EDIWHEEL website</a>. 
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.michelin.adk.amn.o2c.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.michelin.adk.amn.o2c.model.EDIWheelC10DesadvRequestBuyerParty;
import com.michelin.adk.amn.o2c.model.EDIWheelC10DesadvRequestConsignee;
import com.michelin.adk.amn.o2c.model.EDIWheelC10DesadvRequestReferences;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.michelin.adk.amn.JSON;

/**
 * EDIWheelC10DesadvRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class EDIWheelC10DesadvRequest {
  public static final String SERIALIZED_NAME_DOCUMENT_I_D = "documentID";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_I_D)
  @javax.annotation.Nonnull
  private String documentID;

  public static final String SERIALIZED_NAME_VARIANT = "variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  @javax.annotation.Nonnull
  private String variant;

  public static final String SERIALIZED_NAME_DESPATCH_FROM_DATE = "despatchFromDate";
  @SerializedName(SERIALIZED_NAME_DESPATCH_FROM_DATE)
  @javax.annotation.Nullable
  private String despatchFromDate;

  public static final String SERIALIZED_NAME_DESPATCH_TO_DATE = "despatchToDate";
  @SerializedName(SERIALIZED_NAME_DESPATCH_TO_DATE)
  @javax.annotation.Nullable
  private String despatchToDate;

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  @javax.annotation.Nullable
  private EDIWheelC10DesadvRequestReferences references;

  public static final String SERIALIZED_NAME_BUYER_PARTY = "buyerParty";
  @SerializedName(SERIALIZED_NAME_BUYER_PARTY)
  @javax.annotation.Nonnull
  private EDIWheelC10DesadvRequestBuyerParty buyerParty;

  public static final String SERIALIZED_NAME_CONSIGNEE = "consignee";
  @SerializedName(SERIALIZED_NAME_CONSIGNEE)
  @javax.annotation.Nullable
  private EDIWheelC10DesadvRequestConsignee consignee;

  public EDIWheelC10DesadvRequest() {
  }

  public EDIWheelC10DesadvRequest documentID(@javax.annotation.Nonnull String documentID) {
    this.documentID = documentID;
    return this;
  }

  /**
   * Fixed documentID &#x3D; C1
   * @return documentID
   */
  @javax.annotation.Nonnull
  public String getDocumentID() {
    return documentID;
  }

  public void setDocumentID(@javax.annotation.Nonnull String documentID) {
    this.documentID = documentID;
  }


  public EDIWheelC10DesadvRequest variant(@javax.annotation.Nonnull String variant) {
    this.variant = variant;
    return this;
  }

  /**
   * Fixed variant &#x3D; 0
   * @return variant
   */
  @javax.annotation.Nonnull
  public String getVariant() {
    return variant;
  }

  public void setVariant(@javax.annotation.Nonnull String variant) {
    this.variant = variant;
  }


  public EDIWheelC10DesadvRequest despatchFromDate(@javax.annotation.Nullable String despatchFromDate) {
    this.despatchFromDate = despatchFromDate;
    return this;
  }

  /**
   * From Date value for Date Range searches. Format YYYY-MM-DD. Date range cannot be used in conjunction with other reference(s) as selection criteria. Max date range within single search &#x3D; 5 days. Date range OR Reference value required for searches.
   * @return despatchFromDate
   */
  @javax.annotation.Nullable
  public String getDespatchFromDate() {
    return despatchFromDate;
  }

  public void setDespatchFromDate(@javax.annotation.Nullable String despatchFromDate) {
    this.despatchFromDate = despatchFromDate;
  }


  public EDIWheelC10DesadvRequest despatchToDate(@javax.annotation.Nullable String despatchToDate) {
    this.despatchToDate = despatchToDate;
    return this;
  }

  /**
   * To Date value for Date Range searches. Format YYYY-MM-DD. Date range cannot be used in conjunction with other reference(s) as selection criteria. Max date range within single search &#x3D; 5 days. Date range OR Reference value required for searches.
   * @return despatchToDate
   */
  @javax.annotation.Nullable
  public String getDespatchToDate() {
    return despatchToDate;
  }

  public void setDespatchToDate(@javax.annotation.Nullable String despatchToDate) {
    this.despatchToDate = despatchToDate;
  }


  public EDIWheelC10DesadvRequest references(@javax.annotation.Nullable EDIWheelC10DesadvRequestReferences references) {
    this.references = references;
    return this;
  }

  /**
   * Get references
   * @return references
   */
  @javax.annotation.Nullable
  public EDIWheelC10DesadvRequestReferences getReferences() {
    return references;
  }

  public void setReferences(@javax.annotation.Nullable EDIWheelC10DesadvRequestReferences references) {
    this.references = references;
  }


  public EDIWheelC10DesadvRequest buyerParty(@javax.annotation.Nonnull EDIWheelC10DesadvRequestBuyerParty buyerParty) {
    this.buyerParty = buyerParty;
    return this;
  }

  /**
   * Get buyerParty
   * @return buyerParty
   */
  @javax.annotation.Nonnull
  public EDIWheelC10DesadvRequestBuyerParty getBuyerParty() {
    return buyerParty;
  }

  public void setBuyerParty(@javax.annotation.Nonnull EDIWheelC10DesadvRequestBuyerParty buyerParty) {
    this.buyerParty = buyerParty;
  }


  public EDIWheelC10DesadvRequest consignee(@javax.annotation.Nullable EDIWheelC10DesadvRequestConsignee consignee) {
    this.consignee = consignee;
    return this;
  }

  /**
   * Get consignee
   * @return consignee
   */
  @javax.annotation.Nullable
  public EDIWheelC10DesadvRequestConsignee getConsignee() {
    return consignee;
  }

  public void setConsignee(@javax.annotation.Nullable EDIWheelC10DesadvRequestConsignee consignee) {
    this.consignee = consignee;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EDIWheelC10DesadvRequest edIWheelC10DesadvRequest = (EDIWheelC10DesadvRequest) o;
    return Objects.equals(this.documentID, edIWheelC10DesadvRequest.documentID) &&
        Objects.equals(this.variant, edIWheelC10DesadvRequest.variant) &&
        Objects.equals(this.despatchFromDate, edIWheelC10DesadvRequest.despatchFromDate) &&
        Objects.equals(this.despatchToDate, edIWheelC10DesadvRequest.despatchToDate) &&
        Objects.equals(this.references, edIWheelC10DesadvRequest.references) &&
        Objects.equals(this.buyerParty, edIWheelC10DesadvRequest.buyerParty) &&
        Objects.equals(this.consignee, edIWheelC10DesadvRequest.consignee);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentID, variant, despatchFromDate, despatchToDate, references, buyerParty, consignee);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EDIWheelC10DesadvRequest {\n");
    sb.append("    documentID: ").append(toIndentedString(documentID)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("    despatchFromDate: ").append(toIndentedString(despatchFromDate)).append("\n");
    sb.append("    despatchToDate: ").append(toIndentedString(despatchToDate)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    buyerParty: ").append(toIndentedString(buyerParty)).append("\n");
    sb.append("    consignee: ").append(toIndentedString(consignee)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentID");
    openapiFields.add("variant");
    openapiFields.add("despatchFromDate");
    openapiFields.add("despatchToDate");
    openapiFields.add("references");
    openapiFields.add("buyerParty");
    openapiFields.add("consignee");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("documentID");
    openapiRequiredFields.add("variant");
    openapiRequiredFields.add("buyerParty");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EDIWheelC10DesadvRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EDIWheelC10DesadvRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EDIWheelC10DesadvRequest is not found in the empty JSON string", EDIWheelC10DesadvRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EDIWheelC10DesadvRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EDIWheelC10DesadvRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EDIWheelC10DesadvRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("documentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentID").toString()));
      }
      if (!jsonObj.get("variant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant").toString()));
      }
      if ((jsonObj.get("despatchFromDate") != null && !jsonObj.get("despatchFromDate").isJsonNull()) && !jsonObj.get("despatchFromDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `despatchFromDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("despatchFromDate").toString()));
      }
      if ((jsonObj.get("despatchToDate") != null && !jsonObj.get("despatchToDate").isJsonNull()) && !jsonObj.get("despatchToDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `despatchToDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("despatchToDate").toString()));
      }
      // validate the optional field `references`
      if (jsonObj.get("references") != null && !jsonObj.get("references").isJsonNull()) {
        EDIWheelC10DesadvRequestReferences.validateJsonElement(jsonObj.get("references"));
      }
      // validate the required field `buyerParty`
      EDIWheelC10DesadvRequestBuyerParty.validateJsonElement(jsonObj.get("buyerParty"));
      // validate the optional field `consignee`
      if (jsonObj.get("consignee") != null && !jsonObj.get("consignee").isJsonNull()) {
        EDIWheelC10DesadvRequestConsignee.validateJsonElement(jsonObj.get("consignee"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EDIWheelC10DesadvRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EDIWheelC10DesadvRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EDIWheelC10DesadvRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EDIWheelC10DesadvRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EDIWheelC10DesadvRequest>() {
           @Override
           public void write(JsonWriter out, EDIWheelC10DesadvRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EDIWheelC10DesadvRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EDIWheelC10DesadvRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EDIWheelC10DesadvRequest
   * @throws IOException if the JSON string is invalid with respect to EDIWheelC10DesadvRequest
   */
  public static EDIWheelC10DesadvRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EDIWheelC10DesadvRequest.class);
  }

  /**
   * Convert an instance of EDIWheelC10DesadvRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

